@{
    ViewData["Title"] = "Create Notification";
}
<div class="container-fluid py-4">
    <div class="card">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Create Notification</h5>
            <a href="/Notifications" class="btn btn-light btn-sm">
                <i class="fas fa-arrow-left"></i> Back
            </a>
        </div>

        <div class="card-body p-4">
            <form id="createNotificationForm">
                <input type="hidden" id="Id" name="Id" />
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="Email" class="form-label fw-bold">Email</label>
                            <select id="Email" name="Email" class="form-control email-select" data-placeholder="Search for an email..."></select>
                            <span class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label for="From" class="form-label fw-bold">From</label>
                            <select id="From" name="From" class="form-control from-select" data-placeholder="Search for a name..."></select>
                            <span class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label for="Url" class="form-label fw-bold">URL</label>
                            <input type="text" id="Url" name="Url" class="form-control" />
                            <span class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label for="Type" class="form-label fw-bold">Type</label>
                            <select id="Type" name="Type" class="form-select">
                                <option value="QuyTrinh">Quy Trinh</option>
                                <option value="Lich">Lich</option>
                                <option value="CongVan">Cong Van</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="CreateTime" class="form-label fw-bold">Create Time</label>
                            <input type="datetime-local" id="CreateTime" name="CreateTime" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" readonly />
                            <span class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <label class="form-label fw-bold">Content</label>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-primary btn-sm active" data-view="rendered">
                                        Preview
                                    </button>
                                    <button type="button" class="btn btn-outline-primary btn-sm" data-view="raw">
                                        HTML
                                    </button>
                                </div>
                            </div>
                            <textarea id="Content" name="Content" class="form-control mb-3" style="min-height: 400px;"></textarea>
                            <div class="border rounded">
                                <div id="previewContent" class="p-3 bg-light" style="max-height: 500px; overflow-y: auto;">
                                </div>
                                <div id="rawContent" class="p-3 bg-light d-none" style="max-height: 500px; overflow-y: auto;">
                                    <pre><code></code></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-end gap-2 mt-4 pt-3 border-top">
                    <a href="/Notifications" class="btn btn-secondary">Cancel</a>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize select2 for both email and from
            $('.email-select, .from-select').select2({
                width: '100%',
                placeholder: 'Search...',
                allowClear: true
            });

            // Load email and from options
            async function initializeSelects() {
                try {
                    const response = await axios.get('http://localhost:5001/api/PersonalProfile/filter-options');
                    if (response.data.success) {
                        const emailSelect = $('#Email');
                        const fromSelect = $('#From');
                        
                        emailSelect.empty();
                        fromSelect.empty();
                        
                        response.data.data.forEach(item => {
                            if (item.fullName) {
                                const displayText = `${item.fullName} (${item.email})`;
                                emailSelect.append(`<option value="${item.email}">${displayText}</option>`);
                                fromSelect.append(`<option value="${item.fullName}">${displayText}</option>`);
                            } else {
                                emailSelect.append(`<option value="${item.email}">${item.email}</option>`);
                            }
                        });
                    }
                } catch (error) {
                    console.error('Error loading options:', error);
                }
            }

            initializeSelects();

            // Initialize Summernote
            $('#Content').summernote({
                height: 400,
                maxHeight: 800,
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'underline', 'clear']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['table', ['table']],
                    ['insert', ['link']],
                    ['view', ['fullscreen', 'codeview']]
                ],
                callbacks: {
                    onChange: function(contents) {
                        updatePreview(contents);
                    }
                }
            });

            // Preview/Raw toggle functionality
            $('.btn-group button').click(function() {
                $('.btn-group button').removeClass('active');
                $(this).addClass('active');
                
                const view = $(this).data('view');
                if (view === 'rendered') {
                    $('#previewContent').removeClass('d-none');
                    $('#rawContent').addClass('d-none');
                } else {
                    $('#previewContent').addClass('d-none');
                    $('#rawContent').removeClass('d-none');
                }
            });

            updatePreview($('#Content').summernote('code'));

            // Helper function to strip HTML tags
            function stripHtml(html) {
                const temp = document.createElement('div');
                temp.innerHTML = html;
                return temp.textContent || temp.innerText || '';
            }

            // Form submission
            $('form').on('submit', async function(e) {
                e.preventDefault();     

                const htmlContent = $('#Content').summernote('code');
                const plainText = stripHtml(htmlContent);

                const formData = {
                    createdTime: $('#CreateTime').val(),
                    type: $('#Type').val(),
                    content: plainText,
                    email: $('#Email').val(),
                    from: $('#From').val(),
                    url: $('#Url').val(),
                    contentEn: plainText,
                };

                try {
                    const token = localStorage.getItem('token');
                    const response = await axios.post('http://localhost:5001/api/Notifications', formData, {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.data.success) {
                        alert('Notification created successfully!');
                        window.location.href = '/Notifications';
                    } else {
                        alert('Failed to create notification: ' + response.data.message);
                    }
                } catch (error) {
                    console.error('Error creating notification:', error);
                }
            });
        });

        function updatePreview(content) {
            $('#previewContent').html(content);
            $('#rawContent pre code').text(content);
        }
    </script>
}

@section Styles {
    <link href="~/css/select2-custom.css" rel="stylesheet" />
}

