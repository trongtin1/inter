@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Create User Module";
}

<div class="container mt-4">
    <h2 class="mb-4">Create User Module</h2>


    <div class="row">
        <div class="col-md-6">
            <form id="createUserModuleForm" class="p-4 bg-white rounded shadow-sm">
                <div class="form-group mb-4">
                    <label for="userSelect" class="form-label fw-semibold">User</label>
                    <select class="form-control" id="userSelect" required>
                        <option value="">Select User</option>

                    </select>
                </div>
                <div class="form-group mb-4">
                    <label for="roleSelect" class="form-label fw-semibold">Role</label>
                    <select class="form-control" id="roleSelect" required>
                        <option value="">Select Role</option>
                    </select>
                </div>

                <div class="form-group mb-4">
                    <label for="moduleSelect" class="form-label fw-semibold">Module</label>
                    <select class="form-control" id="moduleSelect" required>
                        <option value="">Select Module</option>
                    </select>
                </div>
                <div class="form-group mb-3">
                    <label for="canCreate">Can Create</label>
                    <input type="checkbox" class="form-check-input" id="canCreate">
                </div>
                <div class="form-group mb-3">
                    <label for="canRead">Can Read</label>
                    <input type="checkbox" class="form-check-input" id="canRead">
                </div>
                <div class="form-group mb-3">
                    <label for="canUpdate">Can Update</label>
                    <input type="checkbox" class="form-check-input" id="canUpdate">
                </div>
                <div class="form-group mb-3">
                    <label for="canDelete">Can Delete</label>
                    <input type="checkbox" class="form-check-input" id="canDelete">
                </div>
                <div class="mt-4">
                    <button type="submit" class="btn btn-primary px-4">Create</button>
                    <a href="/RoleModule" class="btn btn-secondary px-4 ms-2">Back to List</a>
                </div>
            </form>
        </div>

    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <link rel="stylesheet" href="~/css/UserRole/Create.css">  

    <script>
        $(document).ready(function () {
            $('#moduleSelect').select2({
                placeholder: 'Search for a module...',
                allowClear: true
            });

            $('#userSelect').select2({
                placeholder: 'Search for a user...',
                allowClear: true
            });
            $('#roleSelect').select2({
                placeholder: 'Search for a role...',
                allowClear: true
            });
            loadUsers();
            $('#createUserModuleForm').on('submit', async function (e) {
                e.preventDefault();
                await createUserModule();
            });

            // Add event handler for user selection change
            $('#userSelect').on('change', function() {
                const userId = $(this).val();
                if (userId) {
                    loadUserRoles(userId);
                } else {
                    // Clear role select if no user is selected
                    const roleSelect = $('#roleSelect');
                    roleSelect.empty();
                    roleSelect.append('<option value="">Select Role</option>');
                }
            });

            // Add event handler for role selection change
            $('#roleSelect').on('change', function() {
                const roleId = $(this).val();
                if (roleId) {
                    loadRoleModules(roleId);
                } else {
                    // Clear module select if no role is selected
                    const moduleSelect = $('#moduleSelect');
                    moduleSelect.empty();
                    moduleSelect.append('<option value="">Select Module</option>');
                }
            });
        });

        // Load modules and users for the create form
        async function loadUsers() {
            try {
                // Load users
                const usersResponse = await axios.get('/api/Users');
                const users = usersResponse.data.data;
                const userSelect = $('#userSelect');
                userSelect.empty();
                userSelect.append('<option value="">Select User</option>');


                users.forEach(user => {
                    userSelect.append(`<option value="${user.id}">${user.username}</option>`);
                });


            } catch (error) {
                console.error('Error loading modules and users:', error);
                alert('Failed to load modules and users');
            }


        }

        // Create user module
        async function createUserModule() {
            const data = {
                moduleId: $('#moduleSelect').val(),
                userId: $('#userSelect').val(),
                canCreate: $('#canCreate').is(':checked'),
                canRead: $('#canRead').is(':checked'),
                canUpdate: $('#canUpdate').is(':checked'),
                canDelete: $('#canDelete').is(':checked')
            }

            if (!data.moduleId || !data.userId) {
                alert('Please select both module and user');
                return;
            }
            try {
                await axios.post('/api/UserModules', data);
                alert('User module created successfully');
                window.location.href = '/UserModule';
            } catch (error) {
                console.error('Error creating user module:', error);
                alert('Failed to create user module');
            }
        }

        // Add new function to load user roles
        async function loadUserRoles(userId) {
            try {
                const response = await axios.get(`/api/UserRoles/${userId}`);
                const userData = response.data.data;
                const roleSelect = $('#roleSelect');
                
                roleSelect.empty();
                roleSelect.append('<option value="">Select Role</option>');

                userData.roles.forEach(role => {
                    roleSelect.append(`<option value="${role.id}">${role.name}</option>`);
                });

            } catch (error) {
                console.error('Error loading user roles:', error);
                alert('Failed to load user roles');
            }
        }

        // Add new function to load role modules
        async function loadRoleModules(roleId) {
            try {
                const response = await axios.get(`/api/RoleModules/${roleId}`);
                const roleData = response.data.data;
                const moduleSelect = $('#moduleSelect');
                
                moduleSelect.empty();
                moduleSelect.append('<option value="">Select Module</option>');

                roleData.modules.forEach(module => {
                    moduleSelect.append(`<option value="${module.moduleId}">${module.moduleName}</option>`);
                });
                
                moduleSelect.on('change', function() {
                    const selectedModuleId = $(this).val();
                    const selectedModule = roleData.modules.find(m => m.moduleId == selectedModuleId);
                    
                    if (selectedModule) {
                        // Handle Create permission
                        $('#canCreate')
                            .prop('checked', selectedModule.canCreate)
                            .prop('disabled', !selectedModule.canCreate);
                        
                        // Handle Read permission
                        $('#canRead')
                            .prop('checked', selectedModule.canRead)
                            .prop('disabled', !selectedModule.canRead);
                        
                        // Handle Update permission
                        $('#canUpdate')
                            .prop('checked', selectedModule.canUpdate)
                            .prop('disabled', !selectedModule.canUpdate);
                        
                        // Handle Delete permission
                        $('#canDelete')
                            .prop('checked', selectedModule.canDelete)
                            .prop('disabled', !selectedModule.canDelete);
                    }
                });

            } catch (error) {
                console.error('Error loading role modules:', error);
                alert('Failed to load role modules');
            }
        }
    </script>
}
